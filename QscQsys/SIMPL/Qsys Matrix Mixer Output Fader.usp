#CATEGORY "46" "Qsys" // Custom
#SYMBOL_NAME "Qsys Matrix Mixer Output Fader"

#USER_SIMPLSHARP_LIBRARY "QscQsys"

Digital_Input MuteOn, MuteOff, GainUp, GainDown;
Analog_Input Gain;
Digital_Output MuteIsOn, MuteIsOff;
Analog_Output _skip_,_skip_, GainValue;

QsysMatrixMixerOutputFader mixer;

String_Parameter _skip_,_skip_,_skip_,_skip_,_skip_, CoreID[100], ComponentName[100];
Integer_Parameter Output, GainStep, GainRepeatTime;

#BEGIN_PARAMETER_PROPERTIES GainRepeatTime
propValidUnits = unitTime;
#END_PARAMETER_PROPERTIES

#BEGIN_PARAMETER_PROPERTIES CoreID
propValidUnits = unitString;
propDefaultUnit = unitString;
propDefaultValue = "1";
#END_PARAMETER_PROPERTIES


integer currentGain;
CMutex _volRampMutex;
integer _volRampDirection;

function GainRepeat()
{
	if(_volRampDirection = 0)
	{
		return;
	}
	else
	{
		if(_volRampDirection = 1)
		{
			if(currentGain <= 65535 - GainStep)
			mixer.SetGain(currentGain + GainStep);
			else if(currentGain > 65535 - GainStep)
			mixer.SetGain(65535);
		}
		else if(_volRampDirection = 2)
		{
			if(currentGain >= 0 + GainStep)
			mixer.SetGain(currentGain - GainStep);
			else if(currentGain < 0 + GainStep)
			mixer.SetGain(0);
		}
		
		if(_volRampDirection > 0)
		{
			wait(GainRepeatTime, vRepeat)
			{
				GainRepeat();
			}
		}
	}
	
}

Push GainUp
{
    _volRampMutex.WaitForMutex();
	_volRampDirection = 1;
	GainRepeat();
    _volRampMutex.ReleaseMutex();
}

Release GainUp
{
    _volRampMutex.WaitForMutex();
	_volRampDirection = 0;
	CancelWait(vRepeat);
	_volRampMutex.ReleaseMutex();
}

Push GainDown
{
    _volRampMutex.WaitForMutex();
	_volRampDirection = 2;
	GainRepeat();
    _volRampMutex.ReleaseMutex();
}

Release GainDown
{
    _volRampMutex.WaitForMutex();
	_volRampDirection = 0;
	CancelWait(vRepeat);
	_volRampMutex.ReleaseMutex();
}

Threadsafe Change Gain
{
	integer x;
	
	if(Gain = 0)
	{
		mixer.SetGain(0);
	}
	else 
	{
		While(x != Gain)
		{
			x = Gain;
			mixer.SetGain(x);
		}
	}
}

Push MuteOn
{
	mixer.SetMute(1);
}

Push MuteOff
{
	mixer.SetMute(0);
}

Callback Function onMuteChange(string cName, integer value)
{
	if(value = 1)
	{
		MuteIsOff = OFF;
		MuteIsOn = ON;
	}
	else
	{
		MuteIsOn = OFF;
		MuteIsOff = ON;
	}
}

callback function onVolumeChange(string cName, integer value)
{
	currentGain = value;
	GainValue = value;
}

Function Main()
{      
	RegisterDelegate(mixer, newMuteChange, onMuteChange);
	RegisterDelegate(mixer, newVolumeChange, onVolumeChange);
	mixer.Initialize(CoreID, ComponentName, Output);            
}
